
* Log options
* log file should be created in application's scratch space, not cwd

* eventloop in top level package?
* color in top level package?
* render? world? what else?

* Put demo.py in 'examples' dir
* demo.py should create a more funky shape and move the camera around it

* Convert options to use argparse, so that it can provide command line usage
* Dependencies should be in a virtualenv. Put virtualenv creation script,
  or 'frozen' version number output, into hg
* Euclid should be a virtualenv installed dependency, not bundled.
  (& then remove path.append in demo.py)
* should be pip installable, and doing so should install its deps
* Check that demo.py works in isolation, using an installed version of gloopy
* Consider getting pyglet latest svn

* Gameitem movement
* camera orbit
* Gameitem orientations
* Gameitem spinners
* Combining the orientations of nested multishapes is done in an innefficient
  manner, multiplying every vertex by each multishape's orientation in
  series. Modify to calculate the cumulative orientation first, then
  multiply each vertex by the result.

* Add some good shapes other than just 'cube'
* measure performance - doesn't look like we're getting 60fps
* add option to use pyglet or pyopengl bindings


AFTER 0.1 RELEASE ------------------------------------------------------------

* Review TODO docs from 'pyweek11' and 'hobbyist opengl' talk, transfer
  good parts into this document
* Optionally use VBOs if they are available. Otherwise silently fall back
  to vertex arrays
* Introduce a variable to control the use of primitives other than
  GL_TRIANGLES. When using GL_TRIANGLE_FAN or _STRIP, draw all the
  discontinuous faces of a single shape in a single draw call, using:
    glEnable( GL_PRIMITIVE_RESTART )
    glPrimitiveRestartIndex( MAXINT ) # for eg
  and then insert indices of value MAXINT into the index array to form a
  break between strips. Bear in mind this is meant to be a space & time
  optimisation, so measure the latter before deciding the keep it.

* bool to display or hide clockdisplay
* Control over ambient and directional light sources
* Point light sources
* Textures

* Start work on the pycon talk demo that will be produced using gloopy
  How about the polyhedran face-extruder?
* Use gloopy to implement the original vision for pyweek11CubeCaught


IDEAS FOR LATER --------------------------------------------------------------

* Generate equipotential surfaces in scalar fields
* Curved surfaces (i.e. re-use same vertex (incl. normals) between adjacent
  triangles)
* Projections should be two polymorphic classes, one for ortho, one for 3d.
  Application instantiates one of each, activates appropriate one during
  rendering.
* Noise shaders
* Geometry instancing, see techniques enumerated here:
  http://www.geeks3d.com/20100629/test-opengl-geometry-instancing-geforce-gtx-480-vs-radeon-hd-5870/
* Cython the render inner loop
* Try enabling gamma correction using: glEnable(GL_FRAMEBUFFER_SRGB)
  This can make a huge difference to the results of lighting
* 2D mode, with ortho projection and 2D verts

DONE -------------------------------------------------------------------------

* delete bits of pyweek11 game that aren't required by gloopy,
* move required bits of pyweek11 specific functionality out to demo.py
* presumably glooby, as a library, should not have a main.py
* move stuff out of demo.py into new gloopy.init()
* creation of cube and a non-default sky color should be done by demo.py
* Named colors: use the xkcd database, as staticmethods on Color
* Eventloop knows about many unrelated things
* Log the version number of gloopy
* Log opengl info

